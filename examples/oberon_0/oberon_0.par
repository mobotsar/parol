%start module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

Selector: { "\." Ident | "\[" Expression "]" };

Factor
    : Ident Selector
    | Integer
    | "\(" Expression "\)"
    | "~" Factor
    | UnaryOp Factor;

Term: Factor MulExpression;

MulExpression: { MulOperator Factor };

SimpleExpression: Term AddExpression;

AddExpression: { AddOperator Term };

AssignOp: ":=";

RelationOp
    : AssignOp
    | RelationalOps;

RelationalOps: ">=|<=|\#|<|>";

AssignOp: "=";

Expression: SimpleExpression [ RelationOp SimpleExpression ];

Assignment: Ident Selector AssignOp Expression;

ActualParameters: "\(" [ Expression { "," Expression } ] "\)";

ProcedureCall: Ident [ ActualParameters ];

IfStatement: IfPrefix [ "ELSE" StatementSequence ] "END";

IfPrefix: "IF" Expression "THEN" StatementSequence { "ELSIF" Expression "THEN" StatementSequence };

WhileStatement: "WHILE" Expression "DO" StatementSequence "END";

RepeatStatement: "REPEAT" StatementSequence "UNTIL" Expression;

Statement
    : Assignment
    | ProcedureCall
    | IfStatement
    | WhileStatement
    | RepeatStatement;

StatementSequence: [ Statement ] { ";" [ Statement ] };

IdentList: Ident { "," Ident };

ArrayType: "ARRAY" Expression "OF" Type;

FieldList: IdentList ":" Type;

RecordType: "RECORD" [ FieldList ] { ";"  [ FieldList ] } "END";

Type
    : Ident
    | ArrayType
    | RecordType;

FPSection: [ "VAR" ] IdentList ":" Type;

FormalParameters: "\(" [ FPSection { ";" FPSection } ] "\)";

ProcedureHeading: "PROCEDURE" Ident [ FormalParameters] ;

ProcedureBody
    : declarations "BEGIN" StatementSequence "RETURN" Expression "END" Ident
    | declarations "RETURN" Expression "END" Ident
    | declarations "BEGIN" StatementSequence "END" Ident
    | declarations "END" Ident;

ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;

declarations
    : "CONST" ConstDecls "Type" TypeDecls [ "VAR" VarDecls ] ProcedureDeclarationList
    | "CONST" ConstDecls [ "VAR" VarDecls ] ProcedureDeclarationList
    | "Type" TypeDecls [ "VAR" VarDecls ] ProcedureDeclarationList
    | "VAR" VarDecls ProcedureDeclarationList
    | ProcedureDeclarationList;

ProcedureDeclarationList: { ProcedureDeclaration ";" };

ConstDecls: { Ident AssignOp Expression ";" };

TypeDecls: { Ident AssignOp Type ";" };

VarDecls: { IdentList ":" Type ";" };

module: "MODULE" Ident ";" declarations [ "BEGIN" StatementSequence ] "END" Ident "\.";

MulOperator: "\*|/|DIV|MOD|&";

AddOperator: "\+|-|OR";

UnaryOp: "\+|-";

Ident: "[a-zA-Z][a-zA-Z0-9]*";

Integer: "[0-9]+";

