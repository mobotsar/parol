// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
use miette::Result;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, UserActionsTrait,
};
use std::cell::RefCell;
use std::path::Path;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 42] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"\."###,
    /*  6 */ r###"\["###,
    /*  7 */ r###"]"###,
    /*  8 */ r###"\("###,
    /*  9 */ r###"\)"###,
    /* 10 */ r###"~"###,
    /* 11 */ r###":="###,
    /* 12 */ r###">=|<=|\#|<|>"###,
    /* 13 */ r###"="###,
    /* 14 */ r###","###,
    /* 15 */ r###"END"###,
    /* 16 */ r###"ELSE"###,
    /* 17 */ r###"IF"###,
    /* 18 */ r###"THEN"###,
    /* 19 */ r###"ELSIF"###,
    /* 20 */ r###"WHILE"###,
    /* 21 */ r###"DO"###,
    /* 22 */ r###"REPEAT"###,
    /* 23 */ r###"UNTIL"###,
    /* 24 */ r###";"###,
    /* 25 */ r###"ARRAY"###,
    /* 26 */ r###"OF"###,
    /* 27 */ r###":"###,
    /* 28 */ r###"RECORD"###,
    /* 29 */ r###"VAR"###,
    /* 30 */ r###"PROCEDURE"###,
    /* 31 */ r###"BEGIN"###,
    /* 32 */ r###"RETURN"###,
    /* 33 */ r###"Type"###,
    /* 34 */ r###"CONST"###,
    /* 35 */ r###"MODULE"###,
    /* 36 */ r###"\*|/|DIV|MOD|&"###,
    /* 37 */ r###"\+|-|OR"###,
    /* 38 */ r###"\+|-"###,
    /* 39 */ r###"[a-zA-Z][a-zA-Z0-9]*"###,
    /* 40 */ r###"[0-9]+"###,
    /* 41 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 42] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Dot",
    /*  6 */ "LBracket",
    /*  7 */ "RBracket",
    /*  8 */ "LParen",
    /*  9 */ "RParen",
    /* 10 */ "Tilde",
    /* 11 */ "ColonEqu",
    /* 12 */ "RelationalOps",
    /* 13 */ "Equ",
    /* 14 */ "Comma",
    /* 15 */ "END",
    /* 16 */ "ELSE",
    /* 17 */ "IF",
    /* 18 */ "THEN",
    /* 19 */ "ELSIF",
    /* 20 */ "WHILE",
    /* 21 */ "DO",
    /* 22 */ "REPEAT",
    /* 23 */ "UNTIL",
    /* 24 */ "Semicolon",
    /* 25 */ "ARRAY",
    /* 26 */ "OF",
    /* 27 */ "Colon",
    /* 28 */ "RECORD",
    /* 29 */ "FPSectionOpt",
    /* 30 */ "PROCEDURE",
    /* 31 */ "BEGIN",
    /* 32 */ "RETURN",
    /* 33 */ "Type",
    /* 34 */ "CONST",
    /* 35 */ "MODULE",
    /* 36 */ "MulOperator",
    /* 37 */ "AddOperator",
    /* 38 */ "UnaryOp",
    /* 39 */ "Ident",
    /* 40 */ "Integer",
    /* 41 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 36]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ r###"((?ms)\(\*.*?\*\))"###,
    ],
    &[
        5,  /* Dot */
        6,  /* LBracket */
        7,  /* RBracket */
        8,  /* LParen */
        9,  /* RParen */
        10, /* Tilde */
        11, /* ColonEqu */
        12, /* RelationalOps */
        13, /* Equ */
        14, /* Comma */
        15, /* END */
        16, /* ELSE */
        17, /* IF */
        18, /* THEN */
        19, /* ELSIF */
        20, /* WHILE */
        21, /* DO */
        22, /* REPEAT */
        23, /* UNTIL */
        24, /* Semicolon */
        25, /* ARRAY */
        26, /* OF */
        27, /* Colon */
        28, /* RECORD */
        29, /* FPSectionOpt */
        30, /* PROCEDURE */
        31, /* BEGIN */
        32, /* RETURN */
        33, /* Type */
        34, /* CONST */
        35, /* MODULE */
        36, /* MulOperator */
        37, /* AddOperator */
        38, /* UnaryOp */
        39, /* Ident */
        40, /* Integer */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 80] = &[
    /*  0 */ "ActualParameters",
    /*  1 */ "ActualParametersOpt",
    /*  2 */ "ActualParametersOptList",
    /*  3 */ "ActualParametersSuffix",
    /*  4 */ "AddExpression",
    /*  5 */ "AddExpressionList",
    /*  6 */ "AddOperator",
    /*  7 */ "ArrayType",
    /*  8 */ "AssignOp",
    /*  9 */ "Assignment",
    /* 10 */ "ConstDecls",
    /* 11 */ "ConstDeclsList",
    /* 12 */ "Expression",
    /* 13 */ "ExpressionOpt",
    /* 14 */ "ExpressionSuffix",
    /* 15 */ "FPSection",
    /* 16 */ "FPSectionOpt",
    /* 17 */ "Factor",
    /* 18 */ "FieldList",
    /* 19 */ "FormalParameters",
    /* 20 */ "FormalParametersOpt",
    /* 21 */ "FormalParametersOptList",
    /* 22 */ "FormalParametersSuffix",
    /* 23 */ "Ident",
    /* 24 */ "IdentList",
    /* 25 */ "IdentListList",
    /* 26 */ "IfPrefix",
    /* 27 */ "IfPrefixList",
    /* 28 */ "IfStatement",
    /* 29 */ "IfStatementOpt",
    /* 30 */ "IfStatementSuffix",
    /* 31 */ "Integer",
    /* 32 */ "MulExpression",
    /* 33 */ "MulExpressionList",
    /* 34 */ "MulOperator",
    /* 35 */ "ProcedureBody",
    /* 36 */ "ProcedureBodySuffix",
    /* 37 */ "ProcedureBodySuffix1",
    /* 38 */ "ProcedureCall",
    /* 39 */ "ProcedureCallOpt",
    /* 40 */ "ProcedureCallSuffix",
    /* 41 */ "ProcedureDeclaration",
    /* 42 */ "ProcedureDeclarationList",
    /* 43 */ "ProcedureDeclarationListList",
    /* 44 */ "ProcedureHeading",
    /* 45 */ "ProcedureHeadingOpt",
    /* 46 */ "ProcedureHeadingSuffix",
    /* 47 */ "RecordType",
    /* 48 */ "RecordTypeList",
    /* 49 */ "RecordTypeListSuffix",
    /* 50 */ "RecordTypeOpt",
    /* 51 */ "RecordTypeSuffix",
    /* 52 */ "RelationOp",
    /* 53 */ "RelationalOps",
    /* 54 */ "RepeatStatement",
    /* 55 */ "Selector",
    /* 56 */ "SelectorList",
    /* 57 */ "SelectorListGroup",
    /* 58 */ "SimpleExpression",
    /* 59 */ "Statement",
    /* 60 */ "StatementSequence",
    /* 61 */ "StatementSequenceList",
    /* 62 */ "StatementSequenceListSuffix",
    /* 63 */ "StatementSequenceOpt",
    /* 64 */ "Term",
    /* 65 */ "Type",
    /* 66 */ "TypeDecls",
    /* 67 */ "TypeDeclsList",
    /* 68 */ "UnaryOp",
    /* 69 */ "VarDecls",
    /* 70 */ "VarDeclsList",
    /* 71 */ "WhileStatement",
    /* 72 */ "declarations",
    /* 73 */ "declarationsOpt",
    /* 74 */ "declarationsSuffix",
    /* 75 */ "declarationsSuffix1",
    /* 76 */ "declarationsSuffix2",
    /* 77 */ "module",
    /* 78 */ "moduleOpt",
    /* 79 */ "moduleSuffix",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 80] = &[
    /* 0 - "ActualParameters" */
    LookaheadDFA {
        states: &[Some(28)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "ActualParametersOpt" */
    LookaheadDFA {
        states: &[Some(31)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "ActualParametersOptList" */
    LookaheadDFA {
        states: &[None, Some(32), Some(33)],
        transitions: &[DFATransition(0, 9, 2), DFATransition(0, 14, 1)],
        k: 1,
    },
    /* 3 - "ActualParametersSuffix" */
    LookaheadDFA {
        states: &[None, Some(29), Some(30)],
        transitions: &[
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 1),
            DFATransition(0, 38, 1),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
        ],
        k: 1,
    },
    /* 4 - "AddExpression" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 5 - "AddExpressionList" */
    LookaheadDFA {
        states: &[None, Some(16), Some(17)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 37, 1),
        ],
        k: 1,
    },
    /* 6 - "AddOperator" */
    LookaheadDFA {
        states: &[Some(124)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "ArrayType" */
    LookaheadDFA {
        states: &[Some(62)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "AssignOp" */
    LookaheadDFA {
        states: &[None, Some(18), Some(22)],
        transitions: &[DFATransition(0, 11, 1), DFATransition(0, 13, 2)],
        k: 1,
    },
    /* 9 - "Assignment" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 10 - "ConstDecls" */
    LookaheadDFA {
        states: &[Some(110)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "ConstDeclsList" */
    LookaheadDFA {
        states: &[None, Some(111), Some(112)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 33, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 12 - "Expression" */
    LookaheadDFA {
        states: &[Some(23)],
        transitions: &[],
        k: 0,
    },
    /* 13 - "ExpressionOpt" */
    LookaheadDFA {
        states: &[Some(26)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "ExpressionSuffix" */
    LookaheadDFA {
        states: &[None, Some(24), Some(25)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 11, 1),
            DFATransition(0, 12, 1),
            DFATransition(0, 13, 1),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 15 - "FPSection" */
    LookaheadDFA {
        states: &[None, Some(75), Some(76)],
        transitions: &[DFATransition(0, 29, 1), DFATransition(0, 39, 2)],
        k: 1,
    },
    /* 16 - "FPSectionOpt" */
    LookaheadDFA {
        states: &[Some(77)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(5), Some(6), Some(7), Some(8), Some(9)],
        transitions: &[
            DFATransition(0, 8, 3),
            DFATransition(0, 10, 4),
            DFATransition(0, 38, 5),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 2),
        ],
        k: 1,
    },
    /* 18 - "FieldList" */
    LookaheadDFA {
        states: &[Some(63)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "FormalParameters" */
    LookaheadDFA {
        states: &[Some(78)],
        transitions: &[],
        k: 0,
    },
    /* 20 - "FormalParametersOpt" */
    LookaheadDFA {
        states: &[Some(81)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "FormalParametersOptList" */
    LookaheadDFA {
        states: &[None, Some(82), Some(83)],
        transitions: &[DFATransition(0, 9, 2), DFATransition(0, 24, 1)],
        k: 1,
    },
    /* 22 - "FormalParametersSuffix" */
    LookaheadDFA {
        states: &[None, Some(79), Some(80)],
        transitions: &[
            DFATransition(0, 9, 2),
            DFATransition(0, 29, 1),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 23 - "Ident" */
    LookaheadDFA {
        states: &[Some(126)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "IdentList" */
    LookaheadDFA {
        states: &[Some(59)],
        transitions: &[],
        k: 0,
    },
    /* 25 - "IdentListList" */
    LookaheadDFA {
        states: &[None, Some(60), Some(61)],
        transitions: &[DFATransition(0, 14, 1), DFATransition(0, 27, 2)],
        k: 1,
    },
    /* 26 - "IfPrefix" */
    LookaheadDFA {
        states: &[Some(42)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "IfPrefixList" */
    LookaheadDFA {
        states: &[None, Some(43), Some(44)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 19, 1),
        ],
        k: 1,
    },
    /* 28 - "IfStatement" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 29 - "IfStatementOpt" */
    LookaheadDFA {
        states: &[Some(41)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "IfStatementSuffix" */
    LookaheadDFA {
        states: &[None, Some(39), Some(40)],
        transitions: &[DFATransition(0, 15, 2), DFATransition(0, 16, 1)],
        k: 1,
    },
    /* 31 - "Integer" */
    LookaheadDFA {
        states: &[Some(127)],
        transitions: &[],
        k: 0,
    },
    /* 32 - "MulExpression" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "MulExpressionList" */
    LookaheadDFA {
        states: &[None, Some(12), Some(13)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 36, 1),
            DFATransition(0, 37, 2),
        ],
        k: 1,
    },
    /* 34 - "MulOperator" */
    LookaheadDFA {
        states: &[Some(123)],
        transitions: &[],
        k: 0,
    },
    /* 35 - "ProcedureBody" */
    LookaheadDFA {
        states: &[Some(88)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "ProcedureBodySuffix" */
    LookaheadDFA {
        states: &[None, Some(92), Some(93)],
        transitions: &[DFATransition(0, 15, 2), DFATransition(0, 32, 1)],
        k: 1,
    },
    /* 37 - "ProcedureBodySuffix1" */
    LookaheadDFA {
        states: &[None, Some(89), Some(90), Some(91)],
        transitions: &[
            DFATransition(0, 15, 3),
            DFATransition(0, 31, 1),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 38 - "ProcedureCall" */
    LookaheadDFA {
        states: &[Some(34)],
        transitions: &[],
        k: 0,
    },
    /* 39 - "ProcedureCallOpt" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "ProcedureCallSuffix" */
    LookaheadDFA {
        states: &[None, Some(35), Some(36)],
        transitions: &[
            DFATransition(0, 8, 1),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 41 - "ProcedureDeclaration" */
    LookaheadDFA {
        states: &[Some(94)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "ProcedureDeclarationList" */
    LookaheadDFA {
        states: &[Some(107)],
        transitions: &[],
        k: 0,
    },
    /* 43 - "ProcedureDeclarationListList" */
    LookaheadDFA {
        states: &[None, Some(108), Some(109)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 30, 1),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 44 - "ProcedureHeading" */
    LookaheadDFA {
        states: &[Some(84)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "ProcedureHeadingOpt" */
    LookaheadDFA {
        states: &[Some(87)],
        transitions: &[],
        k: 0,
    },
    /* 46 - "ProcedureHeadingSuffix" */
    LookaheadDFA {
        states: &[None, Some(85), Some(86)],
        transitions: &[DFATransition(0, 8, 1), DFATransition(0, 24, 2)],
        k: 1,
    },
    /* 47 - "RecordType" */
    LookaheadDFA {
        states: &[Some(64)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "RecordTypeList" */
    LookaheadDFA {
        states: &[None, Some(68), Some(71)],
        transitions: &[DFATransition(0, 15, 2), DFATransition(0, 24, 1)],
        k: 1,
    },
    /* 49 - "RecordTypeListSuffix" */
    LookaheadDFA {
        states: &[None, Some(69), Some(70)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 50 - "RecordTypeOpt" */
    LookaheadDFA {
        states: &[Some(67)],
        transitions: &[],
        k: 0,
    },
    /* 51 - "RecordTypeSuffix" */
    LookaheadDFA {
        states: &[None, Some(65), Some(66)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 52 - "RelationOp" */
    LookaheadDFA {
        states: &[None, Some(19), Some(20)],
        transitions: &[
            DFATransition(0, 11, 1),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 1),
        ],
        k: 1,
    },
    /* 53 - "RelationalOps" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 54 - "RepeatStatement" */
    LookaheadDFA {
        states: &[Some(46)],
        transitions: &[],
        k: 0,
    },
    /* 55 - "Selector" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 56 - "SelectorList" */
    LookaheadDFA {
        states: &[None, Some(1), Some(4)],
        transitions: &[
            DFATransition(0, 5, 1),
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 36, 2),
            DFATransition(0, 37, 2),
        ],
        k: 1,
    },
    /* 57 - "SelectorListGroup" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[DFATransition(0, 5, 1), DFATransition(0, 6, 2)],
        k: 1,
    },
    /* 58 - "SimpleExpression" */
    LookaheadDFA {
        states: &[Some(14)],
        transitions: &[],
        k: 0,
    },
    /* 59 - "Statement" */
    LookaheadDFA {
        states: &[
            None,
            None,
            Some(47),
            Some(48),
            None,
            Some(49),
            None,
            Some(50),
            None,
            Some(51),
        ],
        transitions: &[
            DFATransition(0, 17, 4),
            DFATransition(0, 20, 6),
            DFATransition(0, 22, 8),
            DFATransition(0, 39, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 6, 2),
            DFATransition(1, 8, 3),
            DFATransition(1, 11, 2),
            DFATransition(1, 13, 2),
            DFATransition(1, 15, 3),
            DFATransition(1, 16, 3),
            DFATransition(1, 19, 3),
            DFATransition(1, 23, 3),
            DFATransition(1, 24, 3),
            DFATransition(1, 32, 3),
            DFATransition(4, 8, 5),
            DFATransition(4, 10, 5),
            DFATransition(4, 38, 5),
            DFATransition(4, 39, 5),
            DFATransition(4, 40, 5),
            DFATransition(6, 8, 7),
            DFATransition(6, 10, 7),
            DFATransition(6, 38, 7),
            DFATransition(6, 39, 7),
            DFATransition(6, 40, 7),
            DFATransition(8, 17, 9),
            DFATransition(8, 20, 9),
            DFATransition(8, 22, 9),
            DFATransition(8, 23, 9),
            DFATransition(8, 24, 9),
            DFATransition(8, 39, 9),
        ],
        k: 2,
    },
    /* 60 - "StatementSequence" */
    LookaheadDFA {
        states: &[None, Some(52), Some(53)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 1),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 22, 1),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 61 - "StatementSequenceList" */
    LookaheadDFA {
        states: &[None, Some(55), Some(58)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 1),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 62 - "StatementSequenceListSuffix" */
    LookaheadDFA {
        states: &[None, Some(56), Some(57)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 1),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 22, 1),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 63 - "StatementSequenceOpt" */
    LookaheadDFA {
        states: &[Some(54)],
        transitions: &[],
        k: 0,
    },
    /* 64 - "Term" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 65 - "Type" */
    LookaheadDFA {
        states: &[None, Some(72), Some(73), Some(74)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 28, 3),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 66 - "TypeDecls" */
    LookaheadDFA {
        states: &[Some(113)],
        transitions: &[],
        k: 0,
    },
    /* 67 - "TypeDeclsList" */
    LookaheadDFA {
        states: &[None, Some(114), Some(115)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 68 - "UnaryOp" */
    LookaheadDFA {
        states: &[Some(125)],
        transitions: &[],
        k: 0,
    },
    /* 69 - "VarDecls" */
    LookaheadDFA {
        states: &[Some(116)],
        transitions: &[],
        k: 0,
    },
    /* 70 - "VarDeclsList" */
    LookaheadDFA {
        states: &[None, Some(117), Some(118)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 39, 1),
        ],
        k: 1,
    },
    /* 71 - "WhileStatement" */
    LookaheadDFA {
        states: &[Some(45)],
        transitions: &[],
        k: 0,
    },
    /* 72 - "declarations" */
    LookaheadDFA {
        states: &[None, Some(95), Some(96), Some(99), Some(100)],
        transitions: &[
            DFATransition(0, 15, 4),
            DFATransition(0, 29, 3),
            DFATransition(0, 30, 4),
            DFATransition(0, 31, 4),
            DFATransition(0, 32, 4),
            DFATransition(0, 33, 1),
            DFATransition(0, 34, 2),
        ],
        k: 1,
    },
    /* 73 - "declarationsOpt" */
    LookaheadDFA {
        states: &[Some(106)],
        transitions: &[],
        k: 0,
    },
    /* 74 - "declarationsSuffix" */
    LookaheadDFA {
        states: &[None, Some(104), Some(105)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 29, 1),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 75 - "declarationsSuffix1" */
    LookaheadDFA {
        states: &[None, Some(101), Some(102), Some(103)],
        transitions: &[
            DFATransition(0, 15, 3),
            DFATransition(0, 29, 2),
            DFATransition(0, 30, 3),
            DFATransition(0, 31, 3),
            DFATransition(0, 32, 3),
            DFATransition(0, 33, 1),
        ],
        k: 1,
    },
    /* 76 - "declarationsSuffix2" */
    LookaheadDFA {
        states: &[None, Some(97), Some(98)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 29, 1),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
        ],
        k: 1,
    },
    /* 77 - "module" */
    LookaheadDFA {
        states: &[Some(119)],
        transitions: &[],
        k: 0,
    },
    /* 78 - "moduleOpt" */
    LookaheadDFA {
        states: &[Some(122)],
        transitions: &[],
        k: 0,
    },
    /* 79 - "moduleSuffix" */
    LookaheadDFA {
        states: &[None, Some(120), Some(121)],
        transitions: &[DFATransition(0, 15, 2), DFATransition(0, 31, 1)],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 128] = &[
    // 0 - Selector: SelectorList;
    Production {
        lhs: 55,
        production: &[ParseType::N(56)],
    },
    // 1 - SelectorList: SelectorListGroup SelectorList;
    Production {
        lhs: 56,
        production: &[ParseType::N(56), ParseType::N(57)],
    },
    // 2 - SelectorListGroup: "\." Ident;
    Production {
        lhs: 57,
        production: &[ParseType::N(23), ParseType::T(5)],
    },
    // 3 - SelectorListGroup: "\[" Expression "]";
    Production {
        lhs: 57,
        production: &[ParseType::T(7), ParseType::N(12), ParseType::T(6)],
    },
    // 4 - SelectorList: Vec<SelectorList>::New;
    Production {
        lhs: 56,
        production: &[],
    },
    // 5 - Factor: Ident Selector;
    Production {
        lhs: 17,
        production: &[ParseType::N(55), ParseType::N(23)],
    },
    // 6 - Factor: Integer;
    Production {
        lhs: 17,
        production: &[ParseType::N(31)],
    },
    // 7 - Factor: "\(" Expression "\)";
    Production {
        lhs: 17,
        production: &[ParseType::T(9), ParseType::N(12), ParseType::T(8)],
    },
    // 8 - Factor: "~" Factor;
    Production {
        lhs: 17,
        production: &[ParseType::N(17), ParseType::T(10)],
    },
    // 9 - Factor: UnaryOp Factor;
    Production {
        lhs: 17,
        production: &[ParseType::N(17), ParseType::N(68)],
    },
    // 10 - Term: Factor MulExpression;
    Production {
        lhs: 64,
        production: &[ParseType::N(32), ParseType::N(17)],
    },
    // 11 - MulExpression: MulExpressionList;
    Production {
        lhs: 32,
        production: &[ParseType::N(33)],
    },
    // 12 - MulExpressionList: MulOperator Factor MulExpressionList;
    Production {
        lhs: 33,
        production: &[ParseType::N(33), ParseType::N(17), ParseType::N(34)],
    },
    // 13 - MulExpressionList: Vec<MulExpressionList>::New;
    Production {
        lhs: 33,
        production: &[],
    },
    // 14 - SimpleExpression: Term AddExpression;
    Production {
        lhs: 58,
        production: &[ParseType::N(4), ParseType::N(64)],
    },
    // 15 - AddExpression: AddExpressionList;
    Production {
        lhs: 4,
        production: &[ParseType::N(5)],
    },
    // 16 - AddExpressionList: AddOperator Term AddExpressionList;
    Production {
        lhs: 5,
        production: &[ParseType::N(5), ParseType::N(64), ParseType::N(6)],
    },
    // 17 - AddExpressionList: Vec<AddExpressionList>::New;
    Production {
        lhs: 5,
        production: &[],
    },
    // 18 - AssignOp: ":=";
    Production {
        lhs: 8,
        production: &[ParseType::T(11)],
    },
    // 19 - RelationOp: AssignOp;
    Production {
        lhs: 52,
        production: &[ParseType::N(8)],
    },
    // 20 - RelationOp: RelationalOps;
    Production {
        lhs: 52,
        production: &[ParseType::N(53)],
    },
    // 21 - RelationalOps: ">=|<=|\#|<|>";
    Production {
        lhs: 53,
        production: &[ParseType::T(12)],
    },
    // 22 - AssignOp: "=";
    Production {
        lhs: 8,
        production: &[ParseType::T(13)],
    },
    // 23 - Expression: SimpleExpression ExpressionSuffix;
    Production {
        lhs: 12,
        production: &[ParseType::N(14), ParseType::N(58)],
    },
    // 24 - ExpressionSuffix: ExpressionOpt;
    Production {
        lhs: 14,
        production: &[ParseType::N(13)],
    },
    // 25 - ExpressionSuffix: Option<ExpressionOpt>::None;
    Production {
        lhs: 14,
        production: &[],
    },
    // 26 - ExpressionOpt: RelationOp SimpleExpression;
    Production {
        lhs: 13,
        production: &[ParseType::N(58), ParseType::N(52)],
    },
    // 27 - Assignment: Ident Selector AssignOp Expression;
    Production {
        lhs: 9,
        production: &[
            ParseType::N(12),
            ParseType::N(8),
            ParseType::N(55),
            ParseType::N(23),
        ],
    },
    // 28 - ActualParameters: "\(" ActualParametersSuffix;
    Production {
        lhs: 0,
        production: &[ParseType::N(3), ParseType::T(8)],
    },
    // 29 - ActualParametersSuffix: ActualParametersOpt "\)";
    Production {
        lhs: 3,
        production: &[ParseType::T(9), ParseType::N(1)],
    },
    // 30 - ActualParametersSuffix: Option<ActualParametersOpt>::None "\)";
    Production {
        lhs: 3,
        production: &[ParseType::T(9)],
    },
    // 31 - ActualParametersOpt: Expression ActualParametersOptList;
    Production {
        lhs: 1,
        production: &[ParseType::N(2), ParseType::N(12)],
    },
    // 32 - ActualParametersOptList: "," Expression ActualParametersOptList;
    Production {
        lhs: 2,
        production: &[ParseType::N(2), ParseType::N(12), ParseType::T(14)],
    },
    // 33 - ActualParametersOptList: Vec<ActualParametersOptList>::New;
    Production {
        lhs: 2,
        production: &[],
    },
    // 34 - ProcedureCall: Ident ProcedureCallSuffix;
    Production {
        lhs: 38,
        production: &[ParseType::N(40), ParseType::N(23)],
    },
    // 35 - ProcedureCallSuffix: ProcedureCallOpt;
    Production {
        lhs: 40,
        production: &[ParseType::N(39)],
    },
    // 36 - ProcedureCallSuffix: Option<ProcedureCallOpt>::None;
    Production {
        lhs: 40,
        production: &[],
    },
    // 37 - ProcedureCallOpt: ActualParameters;
    Production {
        lhs: 39,
        production: &[ParseType::N(0)],
    },
    // 38 - IfStatement: IfPrefix IfStatementSuffix;
    Production {
        lhs: 28,
        production: &[ParseType::N(30), ParseType::N(26)],
    },
    // 39 - IfStatementSuffix: IfStatementOpt "END";
    Production {
        lhs: 30,
        production: &[ParseType::T(15), ParseType::N(29)],
    },
    // 40 - IfStatementSuffix: Option<IfStatementOpt>::None "END";
    Production {
        lhs: 30,
        production: &[ParseType::T(15)],
    },
    // 41 - IfStatementOpt: "ELSE" StatementSequence;
    Production {
        lhs: 29,
        production: &[ParseType::N(60), ParseType::T(16)],
    },
    // 42 - IfPrefix: "IF" Expression "THEN" StatementSequence IfPrefixList;
    Production {
        lhs: 26,
        production: &[
            ParseType::N(27),
            ParseType::N(60),
            ParseType::T(18),
            ParseType::N(12),
            ParseType::T(17),
        ],
    },
    // 43 - IfPrefixList: "ELSIF" Expression "THEN" StatementSequence IfPrefixList;
    Production {
        lhs: 27,
        production: &[
            ParseType::N(27),
            ParseType::N(60),
            ParseType::T(18),
            ParseType::N(12),
            ParseType::T(19),
        ],
    },
    // 44 - IfPrefixList: Vec<IfPrefixList>::New;
    Production {
        lhs: 27,
        production: &[],
    },
    // 45 - WhileStatement: "WHILE" Expression "DO" StatementSequence "END";
    Production {
        lhs: 71,
        production: &[
            ParseType::T(15),
            ParseType::N(60),
            ParseType::T(21),
            ParseType::N(12),
            ParseType::T(20),
        ],
    },
    // 46 - RepeatStatement: "REPEAT" StatementSequence "UNTIL" Expression;
    Production {
        lhs: 54,
        production: &[
            ParseType::N(12),
            ParseType::T(23),
            ParseType::N(60),
            ParseType::T(22),
        ],
    },
    // 47 - Statement: Assignment;
    Production {
        lhs: 59,
        production: &[ParseType::N(9)],
    },
    // 48 - Statement: ProcedureCall;
    Production {
        lhs: 59,
        production: &[ParseType::N(38)],
    },
    // 49 - Statement: IfStatement;
    Production {
        lhs: 59,
        production: &[ParseType::N(28)],
    },
    // 50 - Statement: WhileStatement;
    Production {
        lhs: 59,
        production: &[ParseType::N(71)],
    },
    // 51 - Statement: RepeatStatement;
    Production {
        lhs: 59,
        production: &[ParseType::N(54)],
    },
    // 52 - StatementSequence: StatementSequenceOpt StatementSequenceList;
    Production {
        lhs: 60,
        production: &[ParseType::N(61), ParseType::N(63)],
    },
    // 53 - StatementSequence: Option<StatementSequenceOpt>::None StatementSequenceList;
    Production {
        lhs: 60,
        production: &[ParseType::N(61)],
    },
    // 54 - StatementSequenceOpt: Statement;
    Production {
        lhs: 63,
        production: &[ParseType::N(59)],
    },
    // 55 - StatementSequenceList: ";" StatementSequenceListSuffix;
    Production {
        lhs: 61,
        production: &[ParseType::N(62), ParseType::T(24)],
    },
    // 56 - StatementSequenceListSuffix: StatementSequenceOpt StatementSequenceList;
    Production {
        lhs: 62,
        production: &[ParseType::N(61), ParseType::N(63)],
    },
    // 57 - StatementSequenceListSuffix: Option<StatementSequenceListOpt>::None StatementSequenceList;
    Production {
        lhs: 62,
        production: &[ParseType::N(61)],
    },
    // 58 - StatementSequenceList: Vec<StatementSequenceList>::New;
    Production {
        lhs: 61,
        production: &[],
    },
    // 59 - IdentList: Ident IdentListList;
    Production {
        lhs: 24,
        production: &[ParseType::N(25), ParseType::N(23)],
    },
    // 60 - IdentListList: "," Ident IdentListList;
    Production {
        lhs: 25,
        production: &[ParseType::N(25), ParseType::N(23), ParseType::T(14)],
    },
    // 61 - IdentListList: Vec<IdentListList>::New;
    Production {
        lhs: 25,
        production: &[],
    },
    // 62 - ArrayType: "ARRAY" Expression "OF" Type;
    Production {
        lhs: 7,
        production: &[
            ParseType::N(65),
            ParseType::T(26),
            ParseType::N(12),
            ParseType::T(25),
        ],
    },
    // 63 - FieldList: IdentList ":" Type;
    Production {
        lhs: 18,
        production: &[ParseType::N(65), ParseType::T(27), ParseType::N(24)],
    },
    // 64 - RecordType: "RECORD" RecordTypeSuffix;
    Production {
        lhs: 47,
        production: &[ParseType::N(51), ParseType::T(28)],
    },
    // 65 - RecordTypeSuffix: RecordTypeOpt RecordTypeList "END";
    Production {
        lhs: 51,
        production: &[ParseType::T(15), ParseType::N(48), ParseType::N(50)],
    },
    // 66 - RecordTypeSuffix: Option<RecordTypeOpt>::None RecordTypeList "END";
    Production {
        lhs: 51,
        production: &[ParseType::T(15), ParseType::N(48)],
    },
    // 67 - RecordTypeOpt: FieldList;
    Production {
        lhs: 50,
        production: &[ParseType::N(18)],
    },
    // 68 - RecordTypeList: ";" RecordTypeListSuffix;
    Production {
        lhs: 48,
        production: &[ParseType::N(49), ParseType::T(24)],
    },
    // 69 - RecordTypeListSuffix: RecordTypeOpt RecordTypeList;
    Production {
        lhs: 49,
        production: &[ParseType::N(48), ParseType::N(50)],
    },
    // 70 - RecordTypeListSuffix: Option<RecordTypeListOpt>::None RecordTypeList;
    Production {
        lhs: 49,
        production: &[ParseType::N(48)],
    },
    // 71 - RecordTypeList: Vec<RecordTypeList>::New;
    Production {
        lhs: 48,
        production: &[],
    },
    // 72 - Type: Ident;
    Production {
        lhs: 65,
        production: &[ParseType::N(23)],
    },
    // 73 - Type: ArrayType;
    Production {
        lhs: 65,
        production: &[ParseType::N(7)],
    },
    // 74 - Type: RecordType;
    Production {
        lhs: 65,
        production: &[ParseType::N(47)],
    },
    // 75 - FPSection: FPSectionOpt IdentList ":" Type;
    Production {
        lhs: 15,
        production: &[
            ParseType::N(65),
            ParseType::T(27),
            ParseType::N(24),
            ParseType::N(16),
        ],
    },
    // 76 - FPSection: Option<FPSectionOpt>::None IdentList ":" Type;
    Production {
        lhs: 15,
        production: &[ParseType::N(65), ParseType::T(27), ParseType::N(24)],
    },
    // 77 - FPSectionOpt: "VAR";
    Production {
        lhs: 16,
        production: &[ParseType::T(29)],
    },
    // 78 - FormalParameters: "\(" FormalParametersSuffix;
    Production {
        lhs: 19,
        production: &[ParseType::N(22), ParseType::T(8)],
    },
    // 79 - FormalParametersSuffix: FormalParametersOpt "\)";
    Production {
        lhs: 22,
        production: &[ParseType::T(9), ParseType::N(20)],
    },
    // 80 - FormalParametersSuffix: Option<FormalParametersOpt>::None "\)";
    Production {
        lhs: 22,
        production: &[ParseType::T(9)],
    },
    // 81 - FormalParametersOpt: FPSection FormalParametersOptList;
    Production {
        lhs: 20,
        production: &[ParseType::N(21), ParseType::N(15)],
    },
    // 82 - FormalParametersOptList: ";" FPSection FormalParametersOptList;
    Production {
        lhs: 21,
        production: &[ParseType::N(21), ParseType::N(15), ParseType::T(24)],
    },
    // 83 - FormalParametersOptList: Vec<FormalParametersOptList>::New;
    Production {
        lhs: 21,
        production: &[],
    },
    // 84 - ProcedureHeading: "PROCEDURE" Ident ProcedureHeadingSuffix;
    Production {
        lhs: 44,
        production: &[ParseType::N(46), ParseType::N(23), ParseType::T(30)],
    },
    // 85 - ProcedureHeadingSuffix: ProcedureHeadingOpt;
    Production {
        lhs: 46,
        production: &[ParseType::N(45)],
    },
    // 86 - ProcedureHeadingSuffix: Option<ProcedureHeadingOpt>::None;
    Production {
        lhs: 46,
        production: &[],
    },
    // 87 - ProcedureHeadingOpt: FormalParameters;
    Production {
        lhs: 45,
        production: &[ParseType::N(19)],
    },
    // 88 - ProcedureBody: declarations ProcedureBodySuffix1;
    Production {
        lhs: 35,
        production: &[ParseType::N(37), ParseType::N(72)],
    },
    // 89 - ProcedureBodySuffix1: "BEGIN" StatementSequence ProcedureBodySuffix;
    Production {
        lhs: 37,
        production: &[ParseType::N(36), ParseType::N(60), ParseType::T(31)],
    },
    // 90 - ProcedureBodySuffix1: "RETURN" Expression "END" Ident;
    Production {
        lhs: 37,
        production: &[
            ParseType::N(23),
            ParseType::T(15),
            ParseType::N(12),
            ParseType::T(32),
        ],
    },
    // 91 - ProcedureBodySuffix1: "END" Ident;
    Production {
        lhs: 37,
        production: &[ParseType::N(23), ParseType::T(15)],
    },
    // 92 - ProcedureBodySuffix: "RETURN" Expression "END" Ident;
    Production {
        lhs: 36,
        production: &[
            ParseType::N(23),
            ParseType::T(15),
            ParseType::N(12),
            ParseType::T(32),
        ],
    },
    // 93 - ProcedureBodySuffix: "END" Ident;
    Production {
        lhs: 36,
        production: &[ParseType::N(23), ParseType::T(15)],
    },
    // 94 - ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
    Production {
        lhs: 41,
        production: &[ParseType::N(35), ParseType::T(24), ParseType::N(44)],
    },
    // 95 - declarations: "Type" TypeDecls declarationsSuffix2;
    Production {
        lhs: 72,
        production: &[ParseType::N(76), ParseType::N(66), ParseType::T(33)],
    },
    // 96 - declarations: "CONST" ConstDecls declarationsSuffix1;
    Production {
        lhs: 72,
        production: &[ParseType::N(75), ParseType::N(10), ParseType::T(34)],
    },
    // 97 - declarationsSuffix2: declarationsOpt ProcedureDeclarationList;
    Production {
        lhs: 76,
        production: &[ParseType::N(42), ParseType::N(73)],
    },
    // 98 - declarationsSuffix2: Option<declarationsOpt2>::None ProcedureDeclarationList;
    Production {
        lhs: 76,
        production: &[ParseType::N(42)],
    },
    // 99 - declarations: "VAR" VarDecls ProcedureDeclarationList;
    Production {
        lhs: 72,
        production: &[ParseType::N(42), ParseType::N(69), ParseType::T(29)],
    },
    // 100 - declarations: ProcedureDeclarationList;
    Production {
        lhs: 72,
        production: &[ParseType::N(42)],
    },
    // 101 - declarationsSuffix1: "Type" TypeDecls declarationsSuffix;
    Production {
        lhs: 75,
        production: &[ParseType::N(74), ParseType::N(66), ParseType::T(33)],
    },
    // 102 - declarationsSuffix1: declarationsOpt ProcedureDeclarationList;
    Production {
        lhs: 75,
        production: &[ParseType::N(42), ParseType::N(73)],
    },
    // 103 - declarationsSuffix1: Option<declarationsOpt1>::None ProcedureDeclarationList;
    Production {
        lhs: 75,
        production: &[ParseType::N(42)],
    },
    // 104 - declarationsSuffix: declarationsOpt ProcedureDeclarationList;
    Production {
        lhs: 74,
        production: &[ParseType::N(42), ParseType::N(73)],
    },
    // 105 - declarationsSuffix: Option<declarationsOpt>::None ProcedureDeclarationList;
    Production {
        lhs: 74,
        production: &[ParseType::N(42)],
    },
    // 106 - declarationsOpt: "VAR" VarDecls;
    Production {
        lhs: 73,
        production: &[ParseType::N(69), ParseType::T(29)],
    },
    // 107 - ProcedureDeclarationList: ProcedureDeclarationListList;
    Production {
        lhs: 42,
        production: &[ParseType::N(43)],
    },
    // 108 - ProcedureDeclarationListList: ProcedureDeclaration ";" ProcedureDeclarationListList;
    Production {
        lhs: 43,
        production: &[ParseType::N(43), ParseType::T(24), ParseType::N(41)],
    },
    // 109 - ProcedureDeclarationListList: Vec<ProcedureDeclarationListList>::New;
    Production {
        lhs: 43,
        production: &[],
    },
    // 110 - ConstDecls: ConstDeclsList;
    Production {
        lhs: 10,
        production: &[ParseType::N(11)],
    },
    // 111 - ConstDeclsList: Ident AssignOp Expression ";" ConstDeclsList;
    Production {
        lhs: 11,
        production: &[
            ParseType::N(11),
            ParseType::T(24),
            ParseType::N(12),
            ParseType::N(8),
            ParseType::N(23),
        ],
    },
    // 112 - ConstDeclsList: Vec<ConstDeclsList>::New;
    Production {
        lhs: 11,
        production: &[],
    },
    // 113 - TypeDecls: TypeDeclsList;
    Production {
        lhs: 66,
        production: &[ParseType::N(67)],
    },
    // 114 - TypeDeclsList: Ident AssignOp Type ";" TypeDeclsList;
    Production {
        lhs: 67,
        production: &[
            ParseType::N(67),
            ParseType::T(24),
            ParseType::N(65),
            ParseType::N(8),
            ParseType::N(23),
        ],
    },
    // 115 - TypeDeclsList: Vec<TypeDeclsList>::New;
    Production {
        lhs: 67,
        production: &[],
    },
    // 116 - VarDecls: VarDeclsList;
    Production {
        lhs: 69,
        production: &[ParseType::N(70)],
    },
    // 117 - VarDeclsList: IdentList ":" Type ";" VarDeclsList;
    Production {
        lhs: 70,
        production: &[
            ParseType::N(70),
            ParseType::T(24),
            ParseType::N(65),
            ParseType::T(27),
            ParseType::N(24),
        ],
    },
    // 118 - VarDeclsList: Vec<VarDeclsList>::New;
    Production {
        lhs: 70,
        production: &[],
    },
    // 119 - module: "MODULE" Ident ";" declarations moduleSuffix;
    Production {
        lhs: 77,
        production: &[
            ParseType::N(79),
            ParseType::N(72),
            ParseType::T(24),
            ParseType::N(23),
            ParseType::T(35),
        ],
    },
    // 120 - moduleSuffix: moduleOpt "END" Ident "\.";
    Production {
        lhs: 79,
        production: &[
            ParseType::T(5),
            ParseType::N(23),
            ParseType::T(15),
            ParseType::N(78),
        ],
    },
    // 121 - moduleSuffix: Option<moduleOpt>::None "END" Ident "\.";
    Production {
        lhs: 79,
        production: &[ParseType::T(5), ParseType::N(23), ParseType::T(15)],
    },
    // 122 - moduleOpt: "BEGIN" StatementSequence;
    Production {
        lhs: 78,
        production: &[ParseType::N(60), ParseType::T(31)],
    },
    // 123 - MulOperator: "\*|/|DIV|MOD|&";
    Production {
        lhs: 34,
        production: &[ParseType::T(36)],
    },
    // 124 - AddOperator: "\+|-|OR";
    Production {
        lhs: 6,
        production: &[ParseType::T(37)],
    },
    // 125 - UnaryOp: "\+|-";
    Production {
        lhs: 68,
        production: &[ParseType::T(38)],
    },
    // 126 - Ident: "[a-zA-Z][a-zA-Z0-9]*";
    Production {
        lhs: 23,
        production: &[ParseType::T(39)],
    },
    // 127 - Integer: "[0-9]+";
    Production {
        lhs: 31,
        production: &[ParseType::T(40)],
    },
];

lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()
    ),];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut dyn UserActionsTrait,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        77,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    let result = llk_parser.parse(token_stream, user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
