%start module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

/*   0 */ Selector: SelectorList;
/*   1 */ SelectorList: SelectorListGroup SelectorList;
/*   2 */ SelectorListGroup: "\." Ident;
/*   3 */ SelectorListGroup: "\[" Expression "]";
/*   4 */ SelectorList: /* Vec<SelectorList>::New */;
/*   5 */ Factor: Ident Selector;
/*   6 */ Factor: Integer;
/*   7 */ Factor: "\(" Expression "\)";
/*   8 */ Factor: "~" Factor;
/*   9 */ Factor: UnaryOp Factor;
/*  10 */ Term: Factor MulExpression;
/*  11 */ MulExpression: MulExpressionList;
/*  12 */ MulExpressionList: MulOperator Factor MulExpressionList;
/*  13 */ MulExpressionList: /* Vec<MulExpressionList>::New */;
/*  14 */ SimpleExpression: Term AddExpression;
/*  15 */ AddExpression: AddExpressionList;
/*  16 */ AddExpressionList: AddOperator Term AddExpressionList;
/*  17 */ AddExpressionList: /* Vec<AddExpressionList>::New */;
/*  18 */ AssignOp: ":=";
/*  19 */ RelationOp: AssignOp;
/*  20 */ RelationOp: RelationalOps;
/*  21 */ RelationalOps: ">=|<=|\#|<|>";
/*  22 */ AssignOp: "=";
/*  23 */ Expression: SimpleExpression ExpressionSuffix;
/*  24 */ ExpressionSuffix: ExpressionOpt;
/*  25 */ ExpressionSuffix: /* Option<ExpressionOpt>::None */;
/*  26 */ ExpressionOpt: RelationOp SimpleExpression;
/*  27 */ Assignment: Ident Selector AssignOp Expression;
/*  28 */ ActualParameters: "\(" ActualParametersSuffix;
/*  29 */ ActualParametersSuffix: ActualParametersOpt "\)";
/*  30 */ ActualParametersSuffix: /* Option<ActualParametersOpt>::None */ "\)";
/*  31 */ ActualParametersOpt: Expression ActualParametersOptList;
/*  32 */ ActualParametersOptList: "," Expression ActualParametersOptList;
/*  33 */ ActualParametersOptList: /* Vec<ActualParametersOptList>::New */;
/*  34 */ ProcedureCall: Ident ProcedureCallSuffix;
/*  35 */ ProcedureCallSuffix: ProcedureCallOpt;
/*  36 */ ProcedureCallSuffix: /* Option<ProcedureCallOpt>::None */;
/*  37 */ ProcedureCallOpt: ActualParameters;
/*  38 */ IfStatement: IfPrefix IfStatementSuffix;
/*  39 */ IfStatementSuffix: IfStatementOpt "END";
/*  40 */ IfStatementSuffix: /* Option<IfStatementOpt>::None */ "END";
/*  41 */ IfStatementOpt: "ELSE" StatementSequence;
/*  42 */ IfPrefix: "IF" Expression "THEN" StatementSequence IfPrefixList;
/*  43 */ IfPrefixList: "ELSIF" Expression "THEN" StatementSequence IfPrefixList;
/*  44 */ IfPrefixList: /* Vec<IfPrefixList>::New */;
/*  45 */ WhileStatement: "WHILE" Expression "DO" StatementSequence "END";
/*  46 */ RepeatStatement: "REPEAT" StatementSequence "UNTIL" Expression;
/*  47 */ Statement: Assignment;
/*  48 */ Statement: ProcedureCall;
/*  49 */ Statement: IfStatement;
/*  50 */ Statement: WhileStatement;
/*  51 */ Statement: RepeatStatement;
/*  52 */ StatementSequence: StatementSequenceOpt StatementSequenceList;
/*  53 */ StatementSequence: /* Option<StatementSequenceOpt>::None */ StatementSequenceList;
/*  54 */ StatementSequenceOpt: Statement;
/*  55 */ StatementSequenceList: ";" StatementSequenceListSuffix;
/*  56 */ StatementSequenceListSuffix: StatementSequenceOpt StatementSequenceList;
/*  57 */ StatementSequenceListSuffix: /* Option<StatementSequenceListOpt>::None */ StatementSequenceList;
/*  58 */ StatementSequenceList: /* Vec<StatementSequenceList>::New */;
/*  59 */ IdentList: Ident IdentListList;
/*  60 */ IdentListList: "," Ident IdentListList;
/*  61 */ IdentListList: /* Vec<IdentListList>::New */;
/*  62 */ ArrayType: "ARRAY" Expression "OF" Type;
/*  63 */ FieldList: IdentList ":" Type;
/*  64 */ RecordType: "RECORD" RecordTypeSuffix;
/*  65 */ RecordTypeSuffix: RecordTypeOpt RecordTypeList "END";
/*  66 */ RecordTypeSuffix: /* Option<RecordTypeOpt>::None */ RecordTypeList "END";
/*  67 */ RecordTypeOpt: FieldList;
/*  68 */ RecordTypeList: ";" RecordTypeListSuffix;
/*  69 */ RecordTypeListSuffix: RecordTypeOpt RecordTypeList;
/*  70 */ RecordTypeListSuffix: /* Option<RecordTypeListOpt>::None */ RecordTypeList;
/*  71 */ RecordTypeList: /* Vec<RecordTypeList>::New */;
/*  72 */ Type: Ident;
/*  73 */ Type: ArrayType;
/*  74 */ Type: RecordType;
/*  75 */ FPSection: FPSectionOpt IdentList ":" Type;
/*  76 */ FPSection: /* Option<FPSectionOpt>::None */ IdentList ":" Type;
/*  77 */ FPSectionOpt: "VAR";
/*  78 */ FormalParameters: "\(" FormalParametersSuffix;
/*  79 */ FormalParametersSuffix: FormalParametersOpt "\)";
/*  80 */ FormalParametersSuffix: /* Option<FormalParametersOpt>::None */ "\)";
/*  81 */ FormalParametersOpt: FPSection FormalParametersOptList;
/*  82 */ FormalParametersOptList: ";" FPSection FormalParametersOptList;
/*  83 */ FormalParametersOptList: /* Vec<FormalParametersOptList>::New */;
/*  84 */ ProcedureHeading: "PROCEDURE" Ident ProcedureHeadingSuffix;
/*  85 */ ProcedureHeadingSuffix: ProcedureHeadingOpt;
/*  86 */ ProcedureHeadingSuffix: /* Option<ProcedureHeadingOpt>::None */;
/*  87 */ ProcedureHeadingOpt: FormalParameters;
/*  88 */ ProcedureBody: declarations ProcedureBodySuffix1;
/*  89 */ ProcedureBodySuffix1: "BEGIN" StatementSequence ProcedureBodySuffix;
/*  90 */ ProcedureBodySuffix1: "RETURN" Expression "END" Ident;
/*  91 */ ProcedureBodySuffix1: "END" Ident;
/*  92 */ ProcedureBodySuffix: "RETURN" Expression "END" Ident;
/*  93 */ ProcedureBodySuffix: "END" Ident;
/*  94 */ ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
/*  95 */ declarations: "Type" TypeDecls declarationsSuffix2;
/*  96 */ declarations: "CONST" ConstDecls declarationsSuffix1;
/*  97 */ declarationsSuffix2: declarationsOpt ProcedureDeclarationList;
/*  98 */ declarationsSuffix2: /* Option<declarationsOpt2>::None */ ProcedureDeclarationList;
/*  99 */ declarations: "VAR" VarDecls ProcedureDeclarationList;
/* 100 */ declarations: ProcedureDeclarationList;
/* 101 */ declarationsSuffix1: "Type" TypeDecls declarationsSuffix;
/* 102 */ declarationsSuffix1: declarationsOpt ProcedureDeclarationList;
/* 103 */ declarationsSuffix1: /* Option<declarationsOpt1>::None */ ProcedureDeclarationList;
/* 104 */ declarationsSuffix: declarationsOpt ProcedureDeclarationList;
/* 105 */ declarationsSuffix: /* Option<declarationsOpt>::None */ ProcedureDeclarationList;
/* 106 */ declarationsOpt: "VAR" VarDecls;
/* 107 */ ProcedureDeclarationList: ProcedureDeclarationListList;
/* 108 */ ProcedureDeclarationListList: ProcedureDeclaration ";" ProcedureDeclarationListList;
/* 109 */ ProcedureDeclarationListList: /* Vec<ProcedureDeclarationListList>::New */;
/* 110 */ ConstDecls: ConstDeclsList;
/* 111 */ ConstDeclsList: Ident AssignOp Expression ";" ConstDeclsList;
/* 112 */ ConstDeclsList: /* Vec<ConstDeclsList>::New */;
/* 113 */ TypeDecls: TypeDeclsList;
/* 114 */ TypeDeclsList: Ident AssignOp Type ";" TypeDeclsList;
/* 115 */ TypeDeclsList: /* Vec<TypeDeclsList>::New */;
/* 116 */ VarDecls: VarDeclsList;
/* 117 */ VarDeclsList: IdentList ":" Type ";" VarDeclsList;
/* 118 */ VarDeclsList: /* Vec<VarDeclsList>::New */;
/* 119 */ module: "MODULE" Ident ";" declarations moduleSuffix;
/* 120 */ moduleSuffix: moduleOpt "END" Ident "\.";
/* 121 */ moduleSuffix: /* Option<moduleOpt>::None */ "END" Ident "\.";
/* 122 */ moduleOpt: "BEGIN" StatementSequence;
/* 123 */ MulOperator: "\*|/|DIV|MOD|&";
/* 124 */ AddOperator: "\+|-|OR";
/* 125 */ UnaryOp: "\+|-";
/* 126 */ Ident: "[a-zA-Z][a-zA-Z0-9]*";
/* 127 */ Integer: "[0-9]+";
