// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;

use miette::{miette, Result};
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};

use crate::list_grammar::ListGrammar;
use std::path::Path;

///
/// The `ListGrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait ListGrammarTrait {
    ///
    /// Implement this method if you need the provided information
    ///
    fn init(&mut self, _file_name: &Path) {}

    /// Semantic action for production 0:
    ///
    /// List: ListOpt;
    ///
    fn list_0(
        &mut self,
        _list_opt: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// List: ;
    ///
    fn list_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// ListOpt: Num ListRest ListOptSuffix;
    ///
    fn list_opt(
        &mut self,
        _num: &ParseTreeStackEntry,
        _list_rest: &ParseTreeStackEntry,
        _list_opt_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// ListOptSuffix: ListOptOpt;
    ///
    fn list_opt_suffix_0(
        &mut self,
        _list_opt_opt: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// ListOptSuffix: ;
    ///
    fn list_opt_suffix_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// ListOptOpt: ",";
    ///
    fn list_opt_opt(
        &mut self,
        _list_opt_opt: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// ListRest: ListRestOpt;
    ///
    fn list_rest_0(
        &mut self,
        _list_rest_opt: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// ListRest: ;
    ///
    fn list_rest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// ListRestOpt: "," Num ListRest;
    ///
    fn list_rest_opt(
        &mut self,
        _list_opt_opt: &ParseTreeStackEntry,
        _num: &ParseTreeStackEntry,
        _list_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// Num: "0|[1-9][0-9]*";
    ///
    fn num(&mut self, _num: &ParseTreeStackEntry, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait<'_> for ListGrammar {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// It is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, _file_name: &Path) {}

    ///
    /// This function is implemented automatically for the user's item ListGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        match prod_num {
            0 => self.list_0(&children[0], parse_tree),
            1 => self.list_1(parse_tree),
            2 => self.list_opt(&children[0], &children[1], &children[2], parse_tree),
            3 => self.list_opt_suffix_0(&children[0], parse_tree),
            4 => self.list_opt_suffix_1(parse_tree),
            5 => self.list_opt_opt(&children[0], parse_tree),
            6 => self.list_rest_0(&children[0], parse_tree),
            7 => self.list_rest_1(parse_tree),
            8 => self.list_rest_opt(&children[0], &children[1], &children[2], parse_tree),
            9 => self.num(&children[0], parse_tree),
            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
