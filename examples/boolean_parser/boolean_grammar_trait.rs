// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;

#[allow(unused_imports)]
use crate::boolean_grammar::BooleanGrammar;
use miette::{miette, Result};
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};
use std::path::Path;

///
/// The `BooleanGrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait BooleanGrammarTrait {
    ///
    /// Implement this method if you need the provided information
    ///
    fn init(&mut self, _file_name: &Path) {}

    /// Semantic action for production 0:
    ///
    /// Expressions: Expression ExpressionsList ExpressionsSuffix;
    ///
    fn expressions_0(
        &mut self,
        _expression_0: &ParseTreeStackEntry,
        _expressions_list_1: &ParseTreeStackEntry,
        _expressions_suffix_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// ExpressionsSuffix: ExpressionsOpt;
    ///
    fn expressions_suffix_1(
        &mut self,
        _expressions_opt_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// ExpressionsSuffix: /* Option<ExpressionsOpt>::None */;
    ///
    fn expressions_suffix_2(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// ExpressionsOpt: Semicolon;
    ///
    fn expressions_opt_3(
        &mut self,
        _semicolon_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// ExpressionsList: Semicolon Expression ExpressionsList;
    ///
    fn expressions_list_4(
        &mut self,
        _semicolon_0: &ParseTreeStackEntry,
        _expression_1: &ParseTreeStackEntry,
        _expressions_list_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// ExpressionsList: /* Vec<ExpressionsList>::New */;
    ///
    fn expressions_list_5(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// Expression: Term TailExpression;
    ///
    fn expression_6(
        &mut self,
        _term_0: &ParseTreeStackEntry,
        _tail_expression_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// TailExpression: TailExpressionList;
    ///
    fn tail_expression_7(
        &mut self,
        _tail_expression_list_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// TailExpressionList: BinaryOperator Term TailExpressionList;
    ///
    fn tail_expression_list_8(
        &mut self,
        _binary_operator_0: &ParseTreeStackEntry,
        _term_1: &ParseTreeStackEntry,
        _tail_expression_list_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// TailExpressionList: /* Vec<TailExpressionList>::New */;
    ///
    fn tail_expression_list_9(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 10:
    ///
    /// Term: TermOpt Factor;
    ///
    fn term_10(
        &mut self,
        _term_opt_0: &ParseTreeStackEntry,
        _factor_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 11:
    ///
    /// Term: /* Option<TermOpt>::None */ Factor;
    ///
    fn term_11(
        &mut self,
        _factor_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 12:
    ///
    /// TermOpt: UnaryOperator;
    ///
    fn term_opt_12(
        &mut self,
        _unary_operator_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 13:
    ///
    /// Boolean: True;
    ///
    fn boolean_13(
        &mut self,
        _true_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 14:
    ///
    /// Boolean: False;
    ///
    fn boolean_14(
        &mut self,
        _false_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 15:
    ///
    /// UnaryOperator: Not;
    ///
    fn unary_operator_15(
        &mut self,
        _not_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 16:
    ///
    /// BinaryOperator: AndOp;
    ///
    fn binary_operator_16(
        &mut self,
        _and_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 17:
    ///
    /// BinaryOperator: OrOp;
    ///
    fn binary_operator_17(
        &mut self,
        _or_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 18:
    ///
    /// BinaryOperator: XorOp;
    ///
    fn binary_operator_18(
        &mut self,
        _xor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 19:
    ///
    /// BinaryOperator: NorOp;
    ///
    fn binary_operator_19(
        &mut self,
        _nor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 20:
    ///
    /// BinaryOperator: NandOp;
    ///
    fn binary_operator_20(
        &mut self,
        _nand_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 21:
    ///
    /// BinaryOperator: XnorOp;
    ///
    fn binary_operator_21(
        &mut self,
        _xnor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 22:
    ///
    /// AndOp: "(?i)AND";
    ///
    fn and_op_22(
        &mut self,
        _and_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 23:
    ///
    /// OrOp: "(?i)OR";
    ///
    fn or_op_23(
        &mut self,
        _or_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 24:
    ///
    /// XorOp: "(?i)XOR";
    ///
    fn xor_op_24(
        &mut self,
        _xor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 25:
    ///
    /// NorOp: "(?i)NOR";
    ///
    fn nor_op_25(
        &mut self,
        _nor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 26:
    ///
    /// NandOp: "(?i)NAND";
    ///
    fn nand_op_26(
        &mut self,
        _nand_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 27:
    ///
    /// XnorOp: "(?i)XNOR";
    ///
    fn xnor_op_27(
        &mut self,
        _xnor_op_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 28:
    ///
    /// True: "(?i)TRUE";
    ///
    fn r#true_28(
        &mut self,
        _true_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 29:
    ///
    /// False: "(?i)FALSE";
    ///
    fn r#false_29(
        &mut self,
        _false_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 30:
    ///
    /// Not: "(?i)NOT";
    ///
    fn not_30(
        &mut self,
        _not_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 31:
    ///
    /// Parenthesized: LeftParenthesis Expression RightParenthesis;
    ///
    fn parenthesized_31(
        &mut self,
        _left_parenthesis_0: &ParseTreeStackEntry,
        _expression_1: &ParseTreeStackEntry,
        _right_parenthesis_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 32:
    ///
    /// Semicolon: ";";
    ///
    fn semicolon_32(
        &mut self,
        _semicolon_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 33:
    ///
    /// LeftParenthesis: "\(";
    ///
    fn left_parenthesis_33(
        &mut self,
        _left_parenthesis_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 34:
    ///
    /// RightParenthesis: "\)";
    ///
    fn right_parenthesis_34(
        &mut self,
        _right_parenthesis_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 35:
    ///
    /// Factor: Boolean;
    ///
    fn factor_35(
        &mut self,
        _boolean_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 36:
    ///
    /// Factor: Parenthesized;
    ///
    fn factor_36(
        &mut self,
        _parenthesized_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait for BooleanGrammar {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// Is is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, _file_name: &Path) {}

    ///
    /// This function is implemented automatically for the user's item BooleanGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        match prod_num {
            0 => self.expressions_0(&children[0], &children[1], &children[2], parse_tree),

            1 => self.expressions_suffix_1(&children[0], parse_tree),

            2 => self.expressions_suffix_2(parse_tree),

            3 => self.expressions_opt_3(&children[0], parse_tree),

            4 => self.expressions_list_4(&children[0], &children[1], &children[2], parse_tree),

            5 => self.expressions_list_5(parse_tree),

            6 => self.expression_6(&children[0], &children[1], parse_tree),

            7 => self.tail_expression_7(&children[0], parse_tree),

            8 => self.tail_expression_list_8(&children[0], &children[1], &children[2], parse_tree),

            9 => self.tail_expression_list_9(parse_tree),

            10 => self.term_10(&children[0], &children[1], parse_tree),

            11 => self.term_11(&children[0], parse_tree),

            12 => self.term_opt_12(&children[0], parse_tree),

            13 => self.boolean_13(&children[0], parse_tree),

            14 => self.boolean_14(&children[0], parse_tree),

            15 => self.unary_operator_15(&children[0], parse_tree),

            16 => self.binary_operator_16(&children[0], parse_tree),

            17 => self.binary_operator_17(&children[0], parse_tree),

            18 => self.binary_operator_18(&children[0], parse_tree),

            19 => self.binary_operator_19(&children[0], parse_tree),

            20 => self.binary_operator_20(&children[0], parse_tree),

            21 => self.binary_operator_21(&children[0], parse_tree),

            22 => self.and_op_22(&children[0], parse_tree),

            23 => self.or_op_23(&children[0], parse_tree),

            24 => self.xor_op_24(&children[0], parse_tree),

            25 => self.nor_op_25(&children[0], parse_tree),

            26 => self.nand_op_26(&children[0], parse_tree),

            27 => self.xnor_op_27(&children[0], parse_tree),

            28 => self.r#true_28(&children[0], parse_tree),

            29 => self.r#false_29(&children[0], parse_tree),

            30 => self.not_30(&children[0], parse_tree),

            31 => self.parenthesized_31(&children[0], &children[1], &children[2], parse_tree),

            32 => self.semicolon_32(&children[0], parse_tree),

            33 => self.left_parenthesis_33(&children[0], parse_tree),

            34 => self.right_parenthesis_34(&children[0], parse_tree),

            35 => self.factor_35(&children[0], parse_tree),

            36 => self.factor_36(&children[0], parse_tree),

            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
