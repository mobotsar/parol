// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
{{#auto_generate?}}use parol_runtime::lexer::OwnedToken;{{/auto_generate}}
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};
use miette::{miette, Result};
#[allow(unused_imports)]
use crate::{{module_name}}::{{user_type_name}};
{{#auto_generate?}}use std::path::{Path, PathBuf};{{/auto_generate}}{{^auto_generate?}}use std::path::Path;{{/auto_generate}}

{{#auto_generate?}}
/// Semantic actions trait generated for the user grammar
/// All functions have default implementations.
pub trait {{user_type_name}}Trait {
    fn init(&mut self, _file_name: &Path) {}

    {{{user_trait_functions}}}
}

//
// Output Types of productions deduced from the structure of the transformed grammar
//

{{{production_output_types}}}

//
// Types of non-terminals deduced from the structure of the transformed grammar
//

{{{non_terminal_types}}}


//
// AST type of the transformed grammar
//

{{{ast_type_decl}}}

/// Auto-implemented adapter grammar
#[allow(dead_code)]
pub struct {{{user_type_name}}}Auto<'a> {
    // Mutable reference of the actual user grammar to be able to call the semantic actions on it
    user_grammar: &'a mut dyn {{user_type_name}}Trait,
    // Stack to construct the AST on it
    item_stack: Vec<ASTType>,
    // Path of the input file. Used for diagnostics.
    file_name: PathBuf,
}
{{/auto_generate}}

{{#auto_generate?}}
///
/// The `{{{user_type_name}}}Auto` impl is automatically generated for the
/// given grammar.
///
impl<'a> {{{user_type_name}}}Auto<'a> {
    pub fn new(user_grammar: &'a mut dyn {{user_type_name}}Trait) -> Self {
        Self {
            user_grammar,
            item_stack: Vec::new(),
            file_name: PathBuf::default(),
        }
    }
{{/auto_generate}}
{{^auto_generate?}}
///
/// The `{{{user_type_name}}}Trait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait {{{user_type_name}}}Trait {
    ///
    /// Implement this method if you need the provided information
    ///
    fn init(&mut self, _file_name: &Path) {
    }
{{/auto_generate}}

    {{{trait_functions}}}
}

impl UserActionsTrait for {{{user_type_name}}}{{#auto_generate?}}Auto<'_>{{/auto_generate}} {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// Is is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, {{^auto_generate?}}_{{/auto_generate}}file_name: &Path) {
{{#auto_generate?}}
        self.file_name = file_name.to_owned();
        self.user_grammar.init(file_name);
{{/auto_generate}}
    }

    ///
    /// This function is implemented automatically for the user's item {{{user_type_name}}}.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        match prod_num {
{{{trait_caller}}}            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
